
## 1. 프로젝트 시작하기

- 프로젝트: 새로운 제품이나 서비스를 만들기 위해 완전히 새롭게 시도되는 일 또는 체계적인 프로세스로서, 완성된 것을 인도하면 끝난다. 프로젝트에는 위험이 반드시 존재하고 한정된 자원때문에 일반적으로 제한을 받는다.

- 프로젝트 관리자는 위험과 자원을 관리합니다.

- 프로젝트 관리자: '완료'란 무엇인지 명확하게 정의하고, 완료란 무엇인지 의사소통하면서 팀을 완료로 이끄는 사람. 여기서 말하는 '완료'는 회사에서 제품을 개발하는 목적을 달성하고 고객이 제품을 사용하면서 만족하는 것입니다.

- 단 하나의 견인인자와 제한인자, 그리고 4개의 변동인자가 있을 때가 이상적입니다. 견인인자가 1개, 제한인자는 2개, 변동인자가 3개라면 여전히 성공할 수 있습니다. 견인인자와 제한인자가 많아질수록 프로젝트에는 지나치게 제약이 많아집니다.

- '왜'라는 질문을 적게 할수록 비즈니스 요구를 더욱 잘 파악할 수 있습니다. '왜'라는 질문은 다른 사람을 방어적으로 만들기 쉽습니다. '어떻게'란 질문도 삼가야 합니다. '어떻게'란 질문은 후원자에게 시스템을 설계해달라고 부탁하는 것처럼 들립니다.

#### 프로젝트 헌장

- 비전: 이 프로젝트를 하는 이유가 무엇인가?
- 목표: 프로젝트의 목표는 여러분이 프로젝트에서 완수하고 싶은 것이지만, 고객이나 후원자가 기대하는 것은 아닐 수도 있습니다.
- 성공기준: 성공기준이란 프로젝트가 끝났을 때 고객이 제품을 사용해서 무엇을 할 수 있을지를 정의한 것입니다.
- 프로젝트 헌장을 반복해서 수정할 것을 예상하세요.

## 2. 프로젝트 계획하기

- 게획하기와 일정잡기는 서로 다른 활동입니다. 계획하기(planning)란 출시 기준을 포함한 프로젝트 계획을 작성하는 것입니다. 일정잡기(scheduling)란 업무의 윤곽을 잡고 순서를 부여하는 것입니다. 

- 계획은 완벽할 수 없습니다. 여러분이 세우는 계획은 성공할 가능성이 있고 프로젝트를 시작하기에 적당한 정도면 충분합니다.

- 프로젝트에서 특정한 기능이 언제 완성될지 예측해야 한다면 처음 몇 주 동안 처음으로 예측하는 데 시간을 쓰고, 다음 몇 주 동안 이 예측을 갱신합니다. 8주나 12주가 될 때쯤, 어떤 기능이 언제 완성될지 감을 얻습니다.

- 계획을 세우고 데이터를 얻은 다음 다시 계획을 세웁니다.

- 프로젝트의 기간에 여유가 있더라도 '정확한' 계획을 세우려고 지나치게 많은 시간을 쏟으면 시간 압박에 시달리게 됩니다.

- 경험적인 계획하기란 계획을 조금 세우고 나서 실제로 계획이 얼마나 진척되었는지 정보를 모아서 새로운 계획을 세울 때 활용합니다.

- 계획은 쓸모 없지만 계획하기는 가장 중요하다.

- 프로젝트 위험목록 만들기 : 프로젝트 계획에 적어도 10대 위험목록을 작성하세요.

- 고객은 결함 개수가 적다고 제품을 구매하지 않습니다. 고객은 제품을 활용해서 자신이 해결하고 싶은 문제를 해결할 수 있기 때문에 구매합니다.

- 프로젝트 팀원, 후원자, 여러분을 위해 완료의 의미를 정의하는 출시 기준을 만드세요.

## 3. 생애주기를 사용해서 프로젝트 설계하기

- 고객 처지에서 가장 중요한 위험이 무엇인지 알아내야 합니다. 고객에게 가장 중요한 위험이 출시일이거나 결함, 기능, 비용이 되었든 이 위험을 최적화하는 생애주기를 선택하세요.

- 현실에서 어떤 단계가 끝나지 않아도 다음 단계를 시작하지만, 연속적 생애주기에서는 한 번에 하나의 단계만 존재한다는 심리적인 상태가 있습니다.

- 연속적 생애주기는 오래 걸립니다. 왜냐하면 기능을 구현하거나 결함을 발견해서 수정하거나 시스템 모듈을 통합하거나 요구사항 변경을 관리하는 데 얼마나 오래 걸릴지 예상할 수 있다고 가정하기 때문입니다.

- 애자일 생애주기는 조금 계획하고나서 프로젝트를 시작합니다. 즉 계획의 수준은 일을 시작하고 아울러 제품 소유자(product owner)가 이번 출시에서 끝내고 싶어하는 것이 무엇인지 알아내는 정도면 충분합니다.

- 애자일 생애주기의 경우 팀은 능동적으로 자신들이 수행한 작업과 작업 프로세스에 대한 피드백을 구하기 때문에, 프로젝트 상태에 대한 피드백, 개발속도, 결함을 발견하고 수정하는 속도, 팀에서 내리는 가정을 생애주기의 일부로서 인정합니다.

- 아키텍처 위험을 실제로 관리하는 유일한 방법은 무언가를 구현하고 테스트해 보는 것입니다.

- 연속적 생애주기를 따라야 한다면 다음을 따르시오.
- (1) 계획 작성하기, 요구사항, 프로토타이핑을 포함한 모든 것을 반복적으로 계획하세요
- (2) 능력이 되는 한 프로젝트를 시작할 때 가능한 많은 것을 고객이나 고객 대리인에게 보여주거나 프로토타입을 만들어서 보여주세요. 고객이나 고객 대리인에게서 피드백을 많이 받는다면 프로젝트의 상태가 더 좋아집니다.
- (3) 프로젝트를 시작하면서 테스트를 시작하세요. 시스템 전체를 사용하기 전부터 피드백을 얻기 위해서 테스터와 함께 작업하세요.
- (4) 프로젝트를 진행하면서 기능 단위로 구현하고 통합하고 테스트 하세요.
- (5) 문서를 반드시 고객에게 인도해야 한다면 (문서 인도는 연속적 생애주기의 각 단계 마지막에 있는 전형적인 마일스톤입니다), 문서만이 고객에게 인도해야 하는 유일한 산출물이 되지 않게 하세요. 고객과 함께 프로토타입을 살펴보고 고객에게 작동하는 제품을 넘겨주면 팀원들은 유용한 피드백을 얻을 겁니다.

- 스테이지 게이트나 폭포수 생애주기로 성공할 수 있다고 생각할 때만 이 생애주기를 사용하세요, 아무 생각 없이 이런 생애주기를 선택하지 마세요.

## 4. 프로젝트 일정잡기

- 계약서에 서명하기 전에 프로젝트 일정을 보고 싶어하는 고객과 일한다면 처음에 수립하는 일정은 최선을 다해 내놓은 예측치라는 사실을 정확하게 알려주세요. 이 일정은 변할 겁니다. 아울러 고객에게 예측에서 필요한 것은 정밀함(precision)이 아니라 정확함(accuracy)이다'란 걸 알려주세요.

- 일정잡기와 예측은 서로 다른 활동입니다. 일정잡기는 작업에 순서를 부여하고 작업 사이의 독립성을 보여주는 일이죠. 예측은 특정 작업을 처리하는 데 시간이 얼마나 걸릴지 추측하는 것입니다.

- 하향식 일정잡기: 일반적으로 마일슽노에서 시작합니다. 연속적 생애주기에선 하향식 일정잡기로 시작하는 경향이 있습니다. 단계가 매우 명확하기 때문입니다.

- 상향식 일정잡기: 상향식 일정잡기는 특정 작업에서 시작합니다. 

- 허드슨 만 시;작하기: 여러분들 포함한 팀원들이 예측하는 작업이 얼마나 걸릴지 잘 알지 못한다면 허드슨 만 시작 방법에 타임박스를 적용하세요. (...) 팀원들이 무언가를 만들어낸 다음 활동 내역을 간략하게 살펴봅니다. 

- 일정관리 소프트웨어를 사용하면 전체 팀원들이 일정잡기 활동에 적극적으로 참여하지 못합니다. 일정을 작성하려고 도구를 사용하면 토론을 줄이고 보이지 않는 의존관계와 위험을 노출하지 못합니다. (...) 팀원들에게 ㅣㄹ정에 대한 소유권이 있다면 일정을 지킬 것입니다. 프로젝트 관리자 일정을 소윻나다면 여러분은 작업 사이에 존재하는 상호의존성을 관리하는 게 아니라 팀원들을 깐깐히 관리하려고 들 겁니다.

- 마일스톤을 어정쩡하게 마무리 짓는 것을 피하려면 마일스톤을 끝내기 전에 작업을 정리하는 것을 계획하세요. (...) 모든 요구사항을 정리할 것을 '요구사항 확정' 마일스톤으로 구성합니다.

- 기능 조직에 따라서 일정을 수립하는 게 아니라 산출물 기준으로 일정을 세우세요.

